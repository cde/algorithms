continue
nextt
 [maxLeft1,maxLeft2]
next
maxLeft1 <= minRight2 && maxLeft2 <=minRight1
continue
maxLeft2
maxLeft1
 [maxLeft1,maxLeft2].max
(len1 + len2) % 2 == 0
next
maxLeft1 <= minRight2 && maxLeft2 <=minRight1
continue
next
len2
len1
maxLeft1 <= minRight2 && maxLeft2 <=minRight1
minRight2
next
maxLeft2
next
minRight1
next
maxLeft1
next
max
min
next
nex
nextt
max
next
partition1
next
minRight2
maxLeft1
next
maxLeft1 <= minRight2 && maxLeft2 <=minRight1
minRight2
minRight1
maxLeft1
maxLeft2
exit
array1[partition1]
maxLeft1
next
partition2
partition1
array2
array1
exit
 [maxLeft1,maxRight2].max
[maxLeft1,maxRight2]
 3 % 2
len1 + len2
len2
len1
maxRight2 <=minRight1
maxLeft1 <= minRight2
minRight2
next
maxRight2
next
minRight1
next
maxLeft1
next
partition2
next
nexttt
partition1
next
min
max
next
partition1 - 1
partition1
max
minRight2
maxLeft1
next
minRight2
maxLeft1
maxLeft1 <= minRight2
if(maxLeft1 <= minRight2 && maxRight2 <=minRight1)
minRight2
next
maxRight2
next
minRight1
next
nextt
partition1
array1
maxLeft1
next
partition1
partition2
-1
3/2
min + max + 1
max
min
partition2
max
min
partition1
array2
array1
next
max
min
maxLeft1
next
partition2
partition1
nums2
nums1
